#Assignnment: Caching the inverse of a matrix. 

#This function creates a special "matrix" object that can cache its inverse. 
makeCacheMatrix <- function(x) {
              invmatrix <- NULL
              set <- function(y) {
                      x <<- y
                      invmatrix <<- NULL
              }
              
              get <- function() x
              setinverse <- function(inverse) invmatrix <<- inverse
              getinverse <- function() invmatrix
              list(set = set, get = get,
                   setinverse = setinverse,
                   getinverse = getinverse)
}

#This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.If the inverse has already been calculated (and the matrix has not changed), then the cacheSolve should retrieve the inverse from the cache. 
cacheSolve <- function(x, ...) {
        invmatrix <- x$getinverse
        if(!is.null(invmatrix)) {
                    message("getting chache data")
                    return(invmatrix)
        }
        data <- x$get()
        invmatrix <- solve(data, ...)
        x$setinverse(invmatrix)
        invmatrix
}
